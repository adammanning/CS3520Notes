Expression - Evaluates to a value
Statement - An instruction

Imperative Language
	"Giving orders"

Functional Language
	Evaluate expressions

ML is a VERY strong and statically typed language
	Cannot multiply real by int

Bind values to names using "val"
New binding mask old bindings
Functions can be bound like other values

ML Numeric Types
	~ is negation
	- is subtraction

	int
		Infix operators: + - * /(real) div(int) mod
	real
		Infix operators: + - * /

Functions
	Functions only have ONE argument and ONE return value
	Operators are just infix functions
	To get a prefix function, use "op"
	"fun" defines and binds a function in single step
	Functions can return another function
	Function types are right-associative
	Function application is left-associative

Parentheses are used for grouping ONLY
	No parens for function calls

If Expression
	Always evaluates to a value with a specific type
	If and else must have matching types
